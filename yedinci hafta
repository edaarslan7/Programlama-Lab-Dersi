# bir class olacak bu class bir dosya alacak(txt) bu textte 1 ve 2 defa tekrar eden kelimeleri bulan fonk . gördüğünde cümle biter space ile farklı kelime
# my_freq1(word)
# my_freq2(word,word)              ( , ) <- tuple,immutable   [ , ] <- liste

class myClass():
    def __init__(self, myfile=""):
        f = open("story.txt", "r")
        myContent = f.read()
        mySentences = myContent.split(".")
        self.myWords = []
        for sentence in mySentences:
            Words = sentence.split(" ")  # bir liste
            for word_1 in Words:  # listedeki kelimeleri ayırmak
                self.myWords.append(word_1)
        self.my_frequency_1()
        self.write_frequency_1()
        self.my_frequency_2()
        self.write_frequency_2()

    def my_frequency_1(self):
        self.frequency_list_1 = {}
        for word in self.myWords:
            if (word in self.frequency_list_1):
                self.frequency_list_1[word] += 1
            else:
                self.frequency_list_1[word]= 1

    def write_frequency_1(self):
        for word_1 in self.frequency_list_1:
            print(word_1 + " " + str(self.frequency_list_1[word_1]))

    def my_frequency_2(self):
        self.frequency_list_2 = {}
        for i in range(len(self.myWords) - 1):
            w_1, w_2 = self.myWords[i], self.myWords[i + 1]

            if ((w_1, w_2) in self.frequency_list_2):
                self.frequency_list_2[(w_1,w_2)] += 1
            else:
                self.frequency_list_2[(w_1,w_2)]= 1

    def write_frequency_2(self):
        for w_1 in self.frequency_list_2:
            print(str(w_1) + " " + str(self.frequency_list_2[w_1]))


my_class_1 = myClass()



#---------------------------------------

import random

def rollDie():
    """Returns a random int between 1 and 6"""
    return random.choice([1, 2, 3, 4, 5, 6])

def rollN(n):
    result = ''
    for i in range(n):
        result = result + str(rollDie()) + " "
    print(result)

print(rollDie())
rollN(10)

def flip(numFlips):
    #Assumes numFlips a positive int
    heads = 0.0
    for i in range(numFlips):
        if(random.random() < 0.5):
            heads += 1
    return heads / numFlips
print(flip(50000))

def flipSim(numFlipsPerTrial, numTrials):
    #Assumes numFlipsPerTrial and numTrials positive ints
    fracHeads = []
    for i in range(numTrials):
        fracHeads.append(flip(numFlipsPerTrial))
    mean = sum(fracHeads) / len(fracHeads)
    return mean
print(flipSim(10,1))


def flipPlot(minExp,maxExp):
    """Assumes minExp and maxExp positive integers; minExp < maxExp
    Plots results of 2**minExp to 2**maxExp coin flips"""
    ratios = []
    diffs = []
    xAxis = []
    for exp in range(minExp, maxExp + 1):
        xAxis.append(2 ** exp)
    for numFlips in xAxis:
        numHeads = 0
    for n in range(numFlips):
        if(random.random() < 0.5):
            numHeads += 1
        numTails = numFlips - numHeads
        ratios.append(numHeads / float(numTails))
        diffs.append(abs(numHeads - numTails))
    pylab.title('Difference Between Heads and Tails')
    pylab.xlabel('Number of Flips')
    pylab.ylabel('Abs(#Heads - #Tails)')
    pylab.plot(xAxis, diffs)
    pylab.figure()
    pylab.title('Heads/Tails Ratios')
    pylab.xlabel('Number of Flips')
    pylab.ylabel('#Heads/#Tails')
    pylab.plot(xAxis, ratios)

random.seed(0)
print(flipPlot(4, 20))
